{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":19,"numPassedTests":267,"numPendingTestSuites":1,"numPendingTests":5,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":20,"numTotalTests":272,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1761231635719,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["PasswordResetService.sendResetEmail"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService.sendResetEmail succeeds when env is valid and sends mail with proper options","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"succeeds when env is valid and sends mail with proper options"},{"ancestorTitles":["PasswordResetService.sendResetEmail"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService.sendResetEmail returns error when GMAIL_USER is missing","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"returns error when GMAIL_USER is missing"},{"ancestorTitles":["PasswordResetService.sendResetEmail"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService.sendResetEmail returns error when GMAIL_APP_PASSWORD is missing","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"returns error when GMAIL_APP_PASSWORD is missing"},{"ancestorTitles":["PasswordResetService.sendResetEmail"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService.sendResetEmail handles transporter sendMail errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"handles transporter sendMail errors gracefully"},{"ancestorTitles":["PasswordResetService.sendResetEmail"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService.sendResetEmail defaults sender name when GMAIL_SENDER_NAME not set","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"defaults sender name when GMAIL_SENDER_NAME not set"}],"coverage":{},"endTime":1761231638874,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\services\\PasswordResetService.email.test.ts","startTime":1761231638874,"status":"skipped","summary":""},{"assertionResults":[{"ancestorTitles":["ValidationUtils","isValidEmail"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils isValidEmail accepts valid email","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"accepts valid email"},{"ancestorTitles":["ValidationUtils","isValidEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils isValidEmail rejects email without domain dot","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"rejects email without domain dot"},{"ancestorTitles":["ValidationUtils","isValidEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils isValidEmail rejects email without at","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"rejects email without at"},{"ancestorTitles":["ValidationUtils","validatePassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validatePassword rejects empty password","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"rejects empty password"},{"ancestorTitles":["ValidationUtils","validatePassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validatePassword rejects short password","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"rejects short password"},{"ancestorTitles":["ValidationUtils","validatePassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validatePassword rejects missing lowercase","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"rejects missing lowercase"},{"ancestorTitles":["ValidationUtils","validatePassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validatePassword rejects missing uppercase","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"rejects missing uppercase"},{"ancestorTitles":["ValidationUtils","validatePassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validatePassword rejects missing number","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"rejects missing number"},{"ancestorTitles":["ValidationUtils","validatePassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validatePassword accepts strong password","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"accepts strong password"},{"ancestorTitles":["ValidationUtils","isValidUsername"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils isValidUsername accepts valid usernames","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"accepts valid usernames"},{"ancestorTitles":["ValidationUtils","isValidUsername"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils isValidUsername rejects invalid usernames","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"rejects invalid usernames"},{"ancestorTitles":["ValidationUtils","validateFieldFormats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateFieldFormats errors when userId looks like email but invalid format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when userId looks like email but invalid format"},{"ancestorTitles":["ValidationUtils","validateFieldFormats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateFieldFormats errors when projectTitle exceeds max length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when projectTitle exceeds max length"},{"ancestorTitles":["ValidationUtils","validateFieldFormats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateFieldFormats errors for invalid evidenceLinks URL and accepts valid ones","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"errors for invalid evidenceLinks URL and accepts valid ones"},{"ancestorTitles":["ValidationUtils","validateFieldFormats"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateFieldFormats no errors for valid formats","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"no errors for valid formats"},{"ancestorTitles":["ValidationUtils","validateEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateEmail fails when email is missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"fails when email is missing"},{"ancestorTitles":["ValidationUtils","validateEmail"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateEmail fails when email format is invalid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"fails when email format is invalid"},{"ancestorTitles":["ValidationUtils","validateEmail"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateEmail passes when email is valid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"passes when email is valid"},{"ancestorTitles":["ValidationUtils","hashPassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils hashPassword returns hashed string on success","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns hashed string on success"},{"ancestorTitles":["ValidationUtils","hashPassword"],"duration":72,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils hashPassword throws custom error when hashing fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws custom error when hashing fails"},{"ancestorTitles":["ValidationUtils","validateProjectForCreate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateProjectForCreate passes minimal valid data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes minimal valid data"},{"ancestorTitles":["ValidationUtils","validateProjectForCreate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateProjectForCreate fails on invalid optional types and status","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"fails on invalid optional types and status"},{"ancestorTitles":["ValidationUtils","validateProjectForCreate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateProjectForCreate fails on beneficiaries nested types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"fails on beneficiaries nested types"},{"ancestorTitles":["ValidationUtils","validateProjectForUpdate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateProjectForUpdate fails when required fields missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"fails when required fields missing"},{"ancestorTitles":["ValidationUtils","validateProjectForUpdate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateProjectForUpdate includes optional field errors without duplicate projectTitle error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"includes optional field errors without duplicate projectTitle error"},{"ancestorTitles":["ValidationUtils","validateProject (legacy)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ValidationUtils validateProject (legacy) reports all required fields missing and type errors","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"reports all required fields missing and type errors"}],"endTime":1761231637737,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\validators\\ValidationUtils.test.ts","startTime":1761231636615,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ProjectService","Static Helpers & Validation"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation getDefaultTocColor should return the correct default structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"getDefaultTocColor should return the correct default structure"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateTocColorFormat"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateTocColorFormat should return true for a valid, complete tocColor object","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for a valid, complete tocColor object"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateTocColorFormat"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateTocColorFormat should return true if only a subset of sections are provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if only a subset of sections are provided"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateTocColorFormat"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateTocColorFormat should return false for null or non-object input","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false for null or non-object input"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateTocColorFormat"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateTocColorFormat should return false if a section is missing shape or text properties","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if a section is missing shape or text properties"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateCreateRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateCreateRequest should return an empty array for a valid request","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return an empty array for a valid request"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateCreateRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateCreateRequest should return error if projectTitle is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return error if projectTitle is missing"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateCreateRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateCreateRequest should return error if tocColor is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return error if tocColor is invalid"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateUpdateRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateUpdateRequest should return an empty array for a valid request","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return an empty array for a valid request"},{"ancestorTitles":["ProjectService","Static Helpers & Validation","validateUpdateRequest"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService Static Helpers & Validation validateUpdateRequest should return error if projectId is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return error if projectId is missing"},{"ancestorTitles":["ProjectService","generateUniqueProjectId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService generateUniqueProjectId should return \"1\" if no projects exist for the user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return \"1\" if no projects exist for the user"},{"ancestorTitles":["ProjectService","generateUniqueProjectId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService generateUniqueProjectId should return the next sequential ID when projects exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the next sequential ID when projects exist"},{"ancestorTitles":["ProjectService","generateUniqueProjectId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService generateUniqueProjectId should fall back to \"1\" on database error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fall back to \"1\" on database error"},{"ancestorTitles":["ProjectService","checkProjectTitleExists"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService checkProjectTitleExists should return true if title exists for the user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true if title exists for the user"},{"ancestorTitles":["ProjectService","checkProjectTitleExists"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService checkProjectTitleExists should return false if title does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if title does not exist"},{"ancestorTitles":["ProjectService","checkProjectTitleExists"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService checkProjectTitleExists should exclude a specific projectId during update checks","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exclude a specific projectId during update checks"},{"ancestorTitles":["ProjectService","getProjectById"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService getProjectById should successfully retrieve and map an existing project","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully retrieve and map an existing project"},{"ancestorTitles":["ProjectService","getProjectById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService getProjectById should return null if project is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if project is not found"},{"ancestorTitles":["ProjectService","getProjectById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService getProjectById should return null on database error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null on database error"},{"ancestorTitles":["ProjectService","createProject"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService createProject should successfully create a project and return ProjectData","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should successfully create a project and return ProjectData"},{"ancestorTitles":["ProjectService","createProject"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService createProject should use default tocColor if none is provided in the request","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default tocColor if none is provided in the request"},{"ancestorTitles":["ProjectService","createProject"],"duration":110,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService createProject should throw an error if the project title already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the project title already exists"},{"ancestorTitles":["ProjectService","updateProject"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService updateProject should successfully update project data including merging tocData and tocColor","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should successfully update project data including merging tocData and tocColor"},{"ancestorTitles":["ProjectService","updateProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService updateProject should throw an error if the project ID is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if the project ID is not found"},{"ancestorTitles":["ProjectService","updateProject"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService updateProject should throw error if name changes but updateName is false","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error if name changes but updateName is false"},{"ancestorTitles":["ProjectService","updateProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService updateProject should skip uniqueness check if project title is NOT changed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should skip uniqueness check if project title is NOT changed"},{"ancestorTitles":["ProjectService","deleteProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService deleteProject should return true when project is successfully deleted","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when project is successfully deleted"},{"ancestorTitles":["ProjectService","deleteProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService deleteProject should return false when project is not found for deletion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when project is not found for deletion"},{"ancestorTitles":["ProjectService","getProjects"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService getProjects should call listUserProjects and return an array if no projectId is provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call listUserProjects and return an array if no projectId is provided"},{"ancestorTitles":["ProjectService","getProjects"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService getProjects should call getProjectById and return a single project if projectId is provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call getProjectById and return a single project if projectId is provided"},{"ancestorTitles":["ProjectService","getProjects"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService getProjects should throw an error if projectId is provided but project is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error if projectId is provided but project is not found"},{"ancestorTitles":["ProjectService","closeConnection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService closeConnection should call client.close and reset static properties if client exists","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should call client.close and reset static properties if client exists"},{"ancestorTitles":["ProjectService","closeConnection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ProjectService closeConnection should do nothing if client is already null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should do nothing if client is already null"}],"endTime":1761231637875,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\services\\ProjectService.test.ts","startTime":1761231636668,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PasswordResetService","requestPasswordReset"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService requestPasswordReset should successfully generate token, store it, and send email when user exists","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should successfully generate token, store it, and send email when user exists"},{"ancestorTitles":["PasswordResetService","requestPasswordReset"],"duration":82,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService requestPasswordReset should return generic error (500) if token storage fails","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return generic error (500) if token storage fails"},{"ancestorTitles":["PasswordResetService","requestPasswordReset"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService requestPasswordReset should return success and log error if email fails to send","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return success and log error if email fails to send"},{"ancestorTitles":["PasswordResetService","verifyTokenAndResetPassword"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService verifyTokenAndResetPassword should successfully reset password, hash it, and delete the token","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should successfully reset password, hash it, and delete the token"},{"ancestorTitles":["PasswordResetService","verifyTokenAndResetPassword"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService verifyTokenAndResetPassword should return error if token or new password is missing","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return error if token or new password is missing"},{"ancestorTitles":["PasswordResetService","verifyTokenAndResetPassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService verifyTokenAndResetPassword should return error if token is invalid or expired","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return error if token is invalid or expired"},{"ancestorTitles":["PasswordResetService","verifyTokenAndResetPassword"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService verifyTokenAndResetPassword should return error if new password validation fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return error if new password validation fails"},{"ancestorTitles":["PasswordResetService","verifyTokenAndResetPassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService verifyTokenAndResetPassword should return generic error (500) if password update fails","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return generic error (500) if password update fails"},{"ancestorTitles":["PasswordResetService","verifyTokenAndResetPassword"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService verifyTokenAndResetPassword should return generic error (500) if token deletion fails","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return generic error (500) if token deletion fails"},{"ancestorTitles":["PasswordResetService","sendResetEmail (private)"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService sendResetEmail (private) fails when GMAIL_USER is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"fails when GMAIL_USER is missing"},{"ancestorTitles":["PasswordResetService","sendResetEmail (private)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService sendResetEmail (private) fails when GMAIL_APP_PASSWORD is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"fails when GMAIL_APP_PASSWORD is missing"},{"ancestorTitles":["PasswordResetService","sendResetEmail (private)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService sendResetEmail (private) succeeds in sending email when env is set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"succeeds in sending email when env is set"},{"ancestorTitles":["PasswordResetService","buildResetEmailTemplate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService buildResetEmailTemplate builds template with personalized greeting","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"builds template with personalized greeting"},{"ancestorTitles":["PasswordResetService","buildResetEmailTemplate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PasswordResetService buildResetEmailTemplate builds template with generic greeting if displayName is generic","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"builds template with generic greeting if displayName is generic"}],"endTime":1761231637957,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\services\\PasswordResetService.test.ts","startTime":1761231637606,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/user/Create handler"],"duration":47,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 201 Created when registration succeeds","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"returns 201 Created when registration succeeds"},{"ancestorTitles":["api/user/Create handler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 409 Conflict when email already exists","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 409 Conflict when email already exists"},{"ancestorTitles":["api/user/Create handler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 409 Conflict when username already taken","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 409 Conflict when username already taken"},{"ancestorTitles":["api/user/Create handler"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 400 Bad Request with validation errors for invalid input","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"returns 400 Bad Request with validation errors for invalid input"},{"ancestorTitles":["api/user/Create handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 400 Bad Request when password missing","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"returns 400 Bad Request when password missing"},{"ancestorTitles":["api/user/Create handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 400 when password lacks uppercase","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 400 when password lacks uppercase"},{"ancestorTitles":["api/user/Create handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 400 when password lacks lowercase","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 400 when password lacks lowercase"},{"ancestorTitles":["api/user/Create handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 400 when password lacks a number","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 400 when password lacks a number"},{"ancestorTitles":["api/user/Create handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 400 when email is missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 400 when email is missing"},{"ancestorTitles":["api/user/Create handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler does not check username when username is undefined","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"does not check username when username is undefined"},{"ancestorTitles":["api/user/Create handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler does not check username when username is empty string","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"does not check username when username is empty string"},{"ancestorTitles":["api/user/Create handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler sets CORS headers with default origin when none provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers with default origin when none provided"},{"ancestorTitles":["api/user/Create handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler sets CORS headers using request origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using request origin"},{"ancestorTitles":["api/user/Create handler"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler maps service \"already exists\" error to 409","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"already exists\" error to 409"},{"ancestorTitles":["api/user/Create handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler maps service \"not found\" error to 404","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"not found\" error to 404"},{"ancestorTitles":["api/user/Create handler"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler maps service \"required\" error to 400","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"required\" error to 400"},{"ancestorTitles":["api/user/Create handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler returns 405 Method Not Allowed for non-POST methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 Method Not Allowed for non-POST methods"},{"ancestorTitles":["api/user/Create handler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Create handler handles OPTIONS preflight and ends response early","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends response early"}],"endTime":1761231637978,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\user\\Create.test.ts","startTime":1761231636608,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UserService","checkEmailExists"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"UserService checkEmailExists should return true if user exists (case-insensitive check)","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true if user exists (case-insensitive check)"},{"ancestorTitles":["UserService","checkEmailExists"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService checkEmailExists should return false if user does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false if user does not exist"},{"ancestorTitles":["UserService","checkEmailExists"],"duration":152,"failureDetails":[],"failureMessages":[],"fullName":"UserService checkEmailExists should return false on internal database error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false on internal database error"},{"ancestorTitles":["UserService","checkUsernameExists"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService checkUsernameExists should return true if username exists","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true if username exists"},{"ancestorTitles":["UserService","checkUsernameExists"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService checkUsernameExists should return false if username is available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false if username is available"},{"ancestorTitles":["UserService","checkUsernameExists"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UserService checkUsernameExists should return false on internal database error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false on internal database error"},{"ancestorTitles":["UserService","getUserProfile"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserProfile should return formatted UserResponse when user is found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return formatted UserResponse when user is found"},{"ancestorTitles":["UserService","getUserProfile"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserProfile should return null when user is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when user is not found"},{"ancestorTitles":["UserService","getUserProfile"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserProfile should throw a custom error on database failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw a custom error on database failure"},{"ancestorTitles":["UserService","createUser"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser should successfully create a complete user account","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should successfully create a complete user account"},{"ancestorTitles":["UserService","createUser"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser throws Email already registered on email unique violation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws Email already registered on email unique violation"},{"ancestorTitles":["UserService","createUser"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser throws Username already taken on username unique violation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws Username already taken on username unique violation"},{"ancestorTitles":["UserService","createUser"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser throws generic error if user creation fails for other reasons","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws generic error if user creation fails for other reasons"},{"ancestorTitles":["UserService","createUser"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser throws if password hashing fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"throws if password hashing fails"},{"ancestorTitles":["UserService","createUser"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser throws error if retrieving created user fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws error if retrieving created user fails"},{"ancestorTitles":["UserService","createUser"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService createUser continues when profile creation fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"continues when profile creation fails"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should record terms acceptance when acceptTandC is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should record terms acceptance when acceptTandC is true"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should not throw if terms are already accepted","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not throw if terms are already accepted"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should subscribe to newsletter when newsLetterSubs is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should subscribe to newsletter when newsLetterSubs is true"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should not throw if already subscribed to newsletter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not throw if already subscribed to newsletter"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should unsubscribe from newsletter when newsLetterSubs is false","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should unsubscribe from newsletter when newsLetterSubs is false"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should throw a custom error if terms acceptance fails for a different reason","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw a custom error if terms acceptance fails for a different reason"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should throw a custom error if newsletter subscription fails for a different reason","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw a custom error if newsletter subscription fails for a different reason"},{"ancestorTitles":["UserService","updateUserPreferences"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"UserService updateUserPreferences should throw a custom error if newsletter unsubscription fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw a custom error if newsletter unsubscription fails"},{"ancestorTitles":["UserService","getUserPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserPreferences should return correct preference states when both are true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return correct preference states when both are true"},{"ancestorTitles":["UserService","getUserPreferences"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserPreferences should return correct preference states when both are false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct preference states when both are false"},{"ancestorTitles":["UserService","getUserPreferences"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"UserService getUserPreferences should throw a custom error if preference retrieval fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw a custom error if preference retrieval fails"}],"endTime":1761231637978,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\services\\UserService.test.ts","startTime":1761231636672,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/user/Update handler"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 200 OK when profile updated successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns 200 OK when profile updated successfully"},{"ancestorTitles":["api/user/Update handler"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 404 Not Found when user does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 404 Not Found when user does not exist"},{"ancestorTitles":["api/user/Update handler"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 409 Conflict when new username already taken","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns 409 Conflict when new username already taken"},{"ancestorTitles":["api/user/Update handler"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 400 Bad Request when username invalid (validator)","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"returns 400 Bad Request when username invalid (validator)"},{"ancestorTitles":["api/user/Update handler"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler does not check username when username is undefined","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"does not check username when username is undefined"},{"ancestorTitles":["api/user/Update handler"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler does not check username when username is empty string","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"does not check username when username is empty string"},{"ancestorTitles":["api/user/Update handler"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler sets CORS headers with default origin when none provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers with default origin when none provided"},{"ancestorTitles":["api/user/Update handler"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler sets CORS headers using allowed request origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using allowed request origin"},{"ancestorTitles":["api/user/Update handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler handles OPTIONS preflight and ends response early","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends response early"},{"ancestorTitles":["api/user/Update handler"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 405 Method Not Allowed for non-PUT/PATCH methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 Method Not Allowed for non-PUT/PATCH methods"},{"ancestorTitles":["api/user/Update handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 401 Unauthorized when token missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized when token missing"},{"ancestorTitles":["api/user/Update handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 401 Unauthorized for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized for invalid token"},{"ancestorTitles":["api/user/Update handler"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler maps service \"duplicate\" error to 409","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"duplicate\" error to 409"},{"ancestorTitles":["api/user/Update handler"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler maps service \"not found\" error to 404","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"not found\" error to 404"},{"ancestorTitles":["api/user/Update handler"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Update handler returns 500 on unexpected service error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 500 on unexpected service error"}],"endTime":1761231638107,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\user\\Update.test.ts","startTime":1761231636589,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/project/Update handler"],"duration":89,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 200 OK when project updated successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 200 OK when project updated successfully"},{"ancestorTitles":["api/project/Update handler"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 400 when projectId missing (validator)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns 400 when projectId missing (validator)"},{"ancestorTitles":["api/project/Update handler"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 400 when projectTitle missing (validator)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns 400 when projectTitle missing (validator)"},{"ancestorTitles":["api/project/Update handler"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 400 for too-long projectTitle (field format)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 400 for too-long projectTitle (field format)"},{"ancestorTitles":["api/project/Update handler"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 400 for invalid evidenceLinks URL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 400 for invalid evidenceLinks URL"},{"ancestorTitles":["api/project/Update handler"],"duration":39,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler maps service \"duplicate\" error to 409","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"duplicate\" error to 409"},{"ancestorTitles":["api/project/Update handler"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler maps service \"not found\" error to 404","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"not found\" error to 404"},{"ancestorTitles":["api/project/Update handler"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler maps unexpected service error to 500","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps unexpected service error to 500"},{"ancestorTitles":["api/project/Update handler"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler sets CORS headers default when no origin","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers default when no origin"},{"ancestorTitles":["api/project/Update handler"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler sets CORS headers using allowed origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using allowed origin"},{"ancestorTitles":["api/project/Update handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler handles OPTIONS preflight","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight"},{"ancestorTitles":["api/project/Update handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 405 for non-PUT methods","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 405 for non-PUT methods"},{"ancestorTitles":["api/project/Update handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 401 when token missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when token missing"},{"ancestorTitles":["api/project/Update handler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Update handler returns 401 for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 for invalid token"}],"endTime":1761231638088,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\project\\Update.test.ts","startTime":1761231636589,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Password Reset API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API returns 405 Method Not Allowed for non-POST methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 Method Not Allowed for non-POST methods"},{"ancestorTitles":["Password Reset API"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API handles OPTIONS preflight and ends response early","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends response early"},{"ancestorTitles":["Password Reset API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API returns 400 Request body is required when request body is missing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 400 Request body is required when request body is missing"},{"ancestorTitles":["Password Reset API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API returns 400 Validation failed for invalid action","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 400 Validation failed for invalid action"},{"ancestorTitles":["Password Reset API"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API request-reset returns 200 with success message","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"request-reset returns 200 with success message"},{"ancestorTitles":["Password Reset API"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API returns 500 Internal server error when service throws during request-reset","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 500 Internal server error when service throws during request-reset"},{"ancestorTitles":["Password Reset API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API request-reset returns 500 on service failure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"request-reset returns 500 on service failure"},{"ancestorTitles":["Password Reset API"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API verify-token returns 200 on successful password reset","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"verify-token returns 200 on successful password reset"},{"ancestorTitles":["Password Reset API"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API verify-token returns 400 on invalid or expired token","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"verify-token returns 400 on invalid or expired token"},{"ancestorTitles":["Password Reset API"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Password Reset API verify-token returns 400 Validation failed when token/newPassword missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"verify-token returns 400 Validation failed when token/newPassword missing"}],"endTime":1761231638278,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\auth\\password.Reset.test.ts","startTime":1761231638092,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/project/Create handler"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 201 Created when project is created successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 201 Created when project is created successfully"},{"ancestorTitles":["api/project/Create handler"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 400 when projectTitle missing (validator)","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns 400 when projectTitle missing (validator)"},{"ancestorTitles":["api/project/Create handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 400 for too-long projectTitle (field format)","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 400 for too-long projectTitle (field format)"},{"ancestorTitles":["api/project/Create handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 400 for invalid evidenceLinks URL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 400 for invalid evidenceLinks URL"},{"ancestorTitles":["api/project/Create handler"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler maps service \"duplicate\" error to 409","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps service \"duplicate\" error to 409"},{"ancestorTitles":["api/project/Create handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler sets CORS headers default when no origin","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers default when no origin"},{"ancestorTitles":["api/project/Create handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler sets CORS headers using allowed origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using allowed origin"},{"ancestorTitles":["api/project/Create handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler handles OPTIONS preflight","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight"},{"ancestorTitles":["api/project/Create handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 405 for non-POST methods","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 405 for non-POST methods"},{"ancestorTitles":["api/project/Create handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 401 when token missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when token missing"},{"ancestorTitles":["api/project/Create handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Create handler returns 401 for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 for invalid token"}],"endTime":1761231638247,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\project\\Create.test.ts","startTime":1761231637806,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/project/Get handler"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler returns 200 OK for single project by ID","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"returns 200 OK for single project by ID"},{"ancestorTitles":["api/project/Get handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler returns 404 when single project not found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 404 when single project not found"},{"ancestorTitles":["api/project/Get handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler returns 200 OK for list with filters, sorting, and pagination","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"returns 200 OK for list with filters, sorting, and pagination"},{"ancestorTitles":["api/project/Get handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler sets CORS headers default when no origin","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers default when no origin"},{"ancestorTitles":["api/project/Get handler"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler sets CORS headers using allowed origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using allowed origin"},{"ancestorTitles":["api/project/Get handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler handles OPTIONS preflight","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight"},{"ancestorTitles":["api/project/Get handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler returns 405 for non-GET methods","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 405 for non-GET methods"},{"ancestorTitles":["api/project/Get handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler returns 401 when token missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when token missing"},{"ancestorTitles":["api/project/Get handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler returns 401 for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 for invalid token"},{"ancestorTitles":["api/project/Get handler"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"api/project/Get handler maps unexpected service error to 500","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps unexpected service error to 500"}],"endTime":1761231638347,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\project\\Get.test.ts","startTime":1761231638000,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SubscriptionService","getSubscriptionById"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getSubscriptionById should retrieve and map a subscription by ID successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retrieve and map a subscription by ID successfully"},{"ancestorTitles":["SubscriptionService","getSubscriptionById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getSubscriptionById should return null if no subscription is found by ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if no subscription is found by ID"},{"ancestorTitles":["SubscriptionService","getUserSubscription"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getUserSubscription should return the active subscription when multiple exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return the active subscription when multiple exist"},{"ancestorTitles":["SubscriptionService","getUserSubscription"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getUserSubscription should return the most recently updated subscription if no subscription is active","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return the most recently updated subscription if no subscription is active"},{"ancestorTitles":["SubscriptionService","getUserSubscription"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getUserSubscription should return FREE_PLAN_SUBSCRIPTION if no subscriptions are found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return FREE_PLAN_SUBSCRIPTION if no subscriptions are found"},{"ancestorTitles":["SubscriptionService","getActiveUserSubscription"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getActiveUserSubscription should return the active subscription when one is found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return the active subscription when one is found"},{"ancestorTitles":["SubscriptionService","getActiveUserSubscription"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService getActiveUserSubscription should return null if no active subscription is found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if no active subscription is found"}],"endTime":1761231638368,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\services\\SubscriptionService.test.ts","startTime":1761231638263,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Validators - Project","createProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project createProject errors when projectTitle is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when projectTitle is missing"},{"ancestorTitles":["Validators - Project","createProject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project createProject passes when projectTitle is provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when projectTitle is provided"},{"ancestorTitles":["Validators - Project","updateProject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project updateProject errors when projectId is missing or not a string","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"errors when projectId is missing or not a string"},{"ancestorTitles":["Validators - Project","updateProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project updateProject errors when projectTitle is missing or not a string","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"errors when projectTitle is missing or not a string"},{"ancestorTitles":["Validators - Project","updateProject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project updateProject passes when both projectId and projectTitle are valid strings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when both projectId and projectTitle are valid strings"},{"ancestorTitles":["Validators - Project","deleteProject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project deleteProject errors when projectId is missing or not a string","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"errors when projectId is missing or not a string"},{"ancestorTitles":["Validators - Project","deleteProject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Project deleteProject passes when projectId is a valid string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when projectId is a valid string"},{"ancestorTitles":["Validators - Auth","userRegistration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userRegistration errors when email is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when email is invalid"},{"ancestorTitles":["Validators - Auth","userRegistration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userRegistration errors when email is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when email is missing"},{"ancestorTitles":["Validators - Auth","userRegistration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userRegistration errors when password is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when password is missing"},{"ancestorTitles":["Validators - Auth","userRegistration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userRegistration errors when password is weak (too short)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when password is weak (too short)"},{"ancestorTitles":["Validators - Auth","userRegistration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userRegistration passes when email and strong password are provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when email and strong password are provided"},{"ancestorTitles":["Validators - Auth","userLogin"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userLogin errors when email is invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when email is invalid"},{"ancestorTitles":["Validators - Auth","userLogin"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userLogin errors when email is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when email is missing"},{"ancestorTitles":["Validators - Auth","userLogin"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userLogin errors when password is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when password is missing"},{"ancestorTitles":["Validators - Auth","userLogin"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Auth userLogin passes with valid email and any password string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes with valid email and any password string"},{"ancestorTitles":["Validators - User Account","userUpdate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - User Account userUpdate errors when username is provided but invalid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when username is provided but invalid"},{"ancestorTitles":["Validators - User Account","userUpdate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - User Account userUpdate passes when username is valid","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when username is valid"},{"ancestorTitles":["Validators - User Account","userUpdate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - User Account userUpdate passes when username is empty string (treated as not provided)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when username is empty string (treated as not provided)"},{"ancestorTitles":["Validators - User Account","userUpdate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - User Account userUpdate passes when username is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when username is not provided"},{"ancestorTitles":["Validators - User Account","userDelete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - User Account userDelete errors when confirmDelete is not true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when confirmDelete is not true"},{"ancestorTitles":["Validators - User Account","userDelete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - User Account userDelete passes when confirmDelete is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes when confirmDelete is true"},{"ancestorTitles":["Validators - Password Reset"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Password Reset errors when request body is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"errors when request body is missing"},{"ancestorTitles":["Validators - Password Reset"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Password Reset errors when email is missing or invalid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"errors when email is missing or invalid"},{"ancestorTitles":["Validators - Password Reset"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Password Reset errors when action is missing or invalid","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"errors when action is missing or invalid"},{"ancestorTitles":["Validators - Password Reset"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Password Reset errors verify-token flow specific fields","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"errors verify-token flow specific fields"},{"ancestorTitles":["Validators - Password Reset"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Password Reset passes verify-token with strong password and token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes verify-token with strong password and token"},{"ancestorTitles":["Validators - Password Reset"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Validators - Password Reset passes request-reset with valid email","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"passes request-reset with valid email"}],"endTime":1761231638091,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\validators\\Validators.test.ts","startTime":1761231637890,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Subscription Create API"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API returns 405 for non-POST methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 for non-POST methods"},{"ancestorTitles":["Subscription Create API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API handles OPTIONS preflight and ends early","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends early"},{"ancestorTitles":["Subscription Create API"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API returns 401 when no token provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when no token provided"},{"ancestorTitles":["Subscription Create API"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API returns 401 on invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 on invalid token"},{"ancestorTitles":["Subscription Create API"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API returns 201 on successful createOrUpdate","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 201 on successful createOrUpdate"},{"ancestorTitles":["Subscription Create API"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API returns 404 when plan not found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 404 when plan not found"},{"ancestorTitles":["Subscription Create API"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API returns 500 on unexpected service error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 500 on unexpected service error"},{"ancestorTitles":["Subscription Create API"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API sets CORS headers with default origin when none provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers with default origin when none provided"},{"ancestorTitles":["Subscription Create API"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Create API sets CORS headers using request origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using request origin"}],"endTime":1761231638485,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\subscription\\Create.test.ts","startTime":1761231638159,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/project/GetProjectList handler"],"duration":37,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler returns 200 OK with sorted project list and count","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"returns 200 OK with sorted project list and count"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler sets CORS headers default when no origin","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers default when no origin"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler sets CORS headers using allowed origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using allowed origin"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler handles OPTIONS preflight","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler returns 405 for non-GET methods","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 405 for non-GET methods"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler returns 401 when token missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when token missing"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler returns 401 for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 for invalid token"},{"ancestorTitles":["api/project/GetProjectList handler"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"api/project/GetProjectList handler maps unexpected service error to 500","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"maps unexpected service error to 500"}],"endTime":1761231638562,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\project\\GetProjectList.test.ts","startTime":1761231638325,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Google auth API"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Google auth API returns 405 Method Not Allowed for non-POST methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 Method Not Allowed for non-POST methods"},{"ancestorTitles":["Google auth API"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Google auth API handles OPTIONS preflight and ends response early","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends response early"},{"ancestorTitles":["Google auth API"],"duration":53,"failureDetails":[],"failureMessages":[],"fullName":"Google auth API returns 500 when Firebase admin not initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 500 when Firebase admin not initialized"},{"ancestorTitles":["Google auth API"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"Google auth API returns 200 on successful Google login with user and token","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"returns 200 on successful Google login with user and token"},{"ancestorTitles":["Google auth API"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Google auth API returns 401 Unauthorized when token verification fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized when token verification fails"}],"endTime":1761231638603,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\auth\\Google.test.ts","startTime":1761231638369,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Login auth API"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Login auth API returns 405 Method Not Allowed for non-POST methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 Method Not Allowed for non-POST methods"},{"ancestorTitles":["Login auth API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Login auth API handles OPTIONS preflight and ends response early","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends response early"},{"ancestorTitles":["Login auth API"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Login auth API returns 400 Validation failed when email is invalid","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"returns 400 Validation failed when email is invalid"},{"ancestorTitles":["Login auth API"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Login auth API returns 401 Unauthorized when user is not found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized when user is not found"},{"ancestorTitles":["Login auth API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Login auth API returns 401 Unauthorized when password is incorrect","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized when password is incorrect"},{"ancestorTitles":["Login auth API"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Login auth API returns 200 OK with token and user on successful login","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"returns 200 OK with token and user on successful login"}],"endTime":1761231638612,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\auth\\Login.test.ts","startTime":1761231638427,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SubscriptionService create & list","createOrUpdateSubscription (create path)"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService create & list createOrUpdateSubscription (create path) creates subscription and returns mapped result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"creates subscription and returns mapped result"},{"ancestorTitles":["SubscriptionService create & list","createOrUpdateSubscription (create path)"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService create & list createOrUpdateSubscription (create path) applies defaults for status, autoRenew, and startDate when missing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"applies defaults for status, autoRenew, and startDate when missing"},{"ancestorTitles":["SubscriptionService create & list","createOrUpdateSubscription (create path)"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService create & list createOrUpdateSubscription (create path) throws error when created subscription cannot be retrieved","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"throws error when created subscription cannot be retrieved"},{"ancestorTitles":["SubscriptionService create & list","createOrUpdateSubscription (create path)"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService create & list createOrUpdateSubscription (create path) propagates error when create operation fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"propagates error when create operation fails"},{"ancestorTitles":["SubscriptionService create & list","getAllUserSubscriptions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService create & list getAllUserSubscriptions returns empty array when user has no subscriptions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns empty array when user has no subscriptions"},{"ancestorTitles":["SubscriptionService create & list","getAllUserSubscriptions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SubscriptionService create & list getAllUserSubscriptions maps subscriptions correctly when found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"maps subscriptions correctly when found"}],"endTime":1761231638633,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\services\\SubscriptionService.createAll.test.ts","startTime":1761231638477,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Subscription Get API"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 405 for non-GET methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 for non-GET methods"},{"ancestorTitles":["Subscription Get API"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API handles OPTIONS preflight and ends early","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends early"},{"ancestorTitles":["Subscription Get API"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 401 when no token provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 when no token provided"},{"ancestorTitles":["Subscription Get API"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 401 on invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 on invalid token"},{"ancestorTitles":["Subscription Get API"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 404 when subscriptionId not found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 404 when subscriptionId not found"},{"ancestorTitles":["Subscription Get API"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 403 when ownership does not match","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 403 when ownership does not match"},{"ancestorTitles":["Subscription Get API"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 200 with subscription data when fetched by id","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 200 with subscription data when fetched by id"},{"ancestorTitles":["Subscription Get API"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 200 with user subscription when no id provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 200 with user subscription when no id provided"},{"ancestorTitles":["Subscription Get API"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API sets CORS headers with default origin when none provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers with default origin when none provided"},{"ancestorTitles":["Subscription Get API"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API sets CORS headers using request origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using request origin"},{"ancestorTitles":["Subscription Get API"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"Subscription Get API returns 500 on unexpected service error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 500 on unexpected service error"}],"endTime":1761231638703,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\subscription\\Get.test.ts","startTime":1761231638486,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["api/user/Get handler"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler returns 200 OK when profile retrieval succeeds","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 200 OK when profile retrieval succeeds"},{"ancestorTitles":["api/user/Get handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler returns 404 Not Found when user does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 404 Not Found when user does not exist"},{"ancestorTitles":["api/user/Get handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler returns 401 Unauthorized when token missing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized when token missing"},{"ancestorTitles":["api/user/Get handler"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler returns 401 Unauthorized for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 401 Unauthorized for invalid token"},{"ancestorTitles":["api/user/Get handler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler returns 405 Method Not Allowed for non-GET methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"returns 405 Method Not Allowed for non-GET methods"},{"ancestorTitles":["api/user/Get handler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler handles OPTIONS preflight and ends response early","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"handles OPTIONS preflight and ends response early"},{"ancestorTitles":["api/user/Get handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler sets CORS headers with default origin when none provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"sets CORS headers with default origin when none provided"},{"ancestorTitles":["api/user/Get handler"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler sets CORS headers using request origin","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"sets CORS headers using request origin"},{"ancestorTitles":["api/user/Get handler"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"api/user/Get handler returns 500 on unexpected service error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"returns 500 on unexpected service error"}],"endTime":1761231638799,"message":"","name":"D:\\RMIT\\Final Sem\\Project\\Final\\P000315SE\\toc-user-backend\\__tests__\\api\\user\\Get.test.ts","startTime":1761231638491,"status":"passed","summary":""}],"wasInterrupted":false}
